// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: l6vELxZhJ9Rs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Logout from "../../Logout"; // plasmic-import: i0rgrgn_wwgT/component
import TextInput from "../../TextInput"; // plasmic-import: xwgFLXqL07mD/component

import { useScreenVariants as useScreenVariants_8Rmrqs5Mzp6I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8Rmrqs5Mzp6I/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicHomePageAdmin.module.css"; // plasmic-import: l6vELxZhJ9Rs/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: TfB627kbYt5s/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BLgPkmgd4hOv/icon

createPlasmicElementProxy;

export type PlasmicHomePageAdmin__VariantMembers = {};
export type PlasmicHomePageAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomePageAdmin__VariantsArgs;
export const PlasmicHomePageAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicHomePageAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicHomePageAdmin__ArgsType;
export const PlasmicHomePageAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicHomePageAdmin__OverridesType = {
  root?: Flex__<"div">;
  logout?: Flex__<typeof Logout>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  mainAction?: Flex__<"div">;
  actions?: Flex__<"div">;
  players?: Flex__<"div">;
};

export interface DefaultHomePageAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomePageAdmin__RenderFunc(props: {
  variants: PlasmicHomePageAdmin__VariantsArgs;
  args: PlasmicHomePageAdmin__ArgsType;
  overrides: PlasmicHomePageAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8Rmrqs5Mzp6I()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x3C63
            )}
          >
            {"Calculation"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__r9Npe)}>
            <Logout
              data-plasmic-name={"logout"}
              data-plasmic-override={overrides.logout}
              className={classNames("__wab_instance", sty.logout)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___1FSi0)}>
            <div className={classNames(projectcss.all, sty.freeBox__ndrfH)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8C0Cn
                )}
              >
                {"CHEMPIONAT"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kP1W1
                )}
              >
                {"KLUB"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ok06S
                )}
              >
                {"POZITSIYA"}
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uvoxA)}
          >
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Chempionat sort"}
              showEndIcon={true}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"textInput2"}
              data-plasmic-override={overrides.textInput2}
              className={classNames("__wab_instance", sty.textInput2)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput2", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Klub sort"}
              value={
                generateStateValueProp($state, ["textInput2", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"textInput3"}
              data-plasmic-override={overrides.textInput3}
              className={classNames("__wab_instance", sty.textInput3)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput3", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Pozitsiya sort"}
              value={
                generateStateValueProp($state, ["textInput3", "value"]) ?? ""
              }
            />
          </Stack__>
          <div
            data-plasmic-name={"mainAction"}
            data-plasmic-override={overrides.mainAction}
            className={classNames(projectcss.all, sty.mainAction)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"actions"}
              data-plasmic-override={overrides.actions}
              hasGap={true}
              className={classNames(projectcss.all, sty.actions)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__rn7Q3)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Lqn
                  )}
                >
                  {"Footbals"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hp381)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ualYl
                  )}
                >
                  {"MInut"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bc0Zb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oebsJ
                  )}
                >
                  {"Gol"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sJHz)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k2PtJ
                  )}
                >
                  {"Assist"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ndBnt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tWrVy
                  )}
                >
                  {"Empty game"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__onhp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lvOjn
                  )}
                >
                  {"No penalty"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___9ISmC)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q8Tmv
                  )}
                >
                  {"-2 Gol"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hI4X)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5GwaD
                  )}
                >
                  {"Yellow card"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__f07Kg)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pv5JR
                  )}
                >
                  {"Red card"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__teVey)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qxOfz
                  )}
                >
                  {"Total"}
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"players"}
              data-plasmic-override={overrides.players}
              hasGap={true}
              className={classNames(projectcss.all, sty.players)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yrc4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___65Dox
                  )}
                >
                  {"Ronaldo"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lowcJ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jjxOo
                  )}
                >
                  {"50"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bUsG2)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iQdMh
                  )}
                >
                  {"2"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___99VZ5)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rj0Kt
                  )}
                >
                  {"1"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fet6M)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f6D1F
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__klrip)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___384AU
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hwVhb)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___18322
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__w4Lez)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ffynT
                  )}
                >
                  {"2"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uaRbY)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zaGz
                  )}
                >
                  {"1"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__trUg8)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rLhJb
                  )}
                >
                  {"11"}
                </div>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logout",
    "textInput",
    "textInput2",
    "textInput3",
    "mainAction",
    "actions",
    "players"
  ],
  logout: ["logout"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  mainAction: ["mainAction", "actions", "players"],
  actions: ["actions"],
  players: ["players"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logout: typeof Logout;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  mainAction: "div";
  actions: "div";
  players: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomePageAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomePageAdmin__VariantsArgs;
    args?: PlasmicHomePageAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomePageAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomePageAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomePageAdmin__ArgProps,
          internalVariantPropNames: PlasmicHomePageAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomePageAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomePageAdmin";
  } else {
    func.displayName = `PlasmicHomePageAdmin.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicHomePageAdmin = Object.assign(
  // Top-level PlasmicHomePageAdmin renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    logout: makeNodeComponent("logout"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    mainAction: makeNodeComponent("mainAction"),
    actions: makeNodeComponent("actions"),
    players: makeNodeComponent("players"),

    // Metadata about props expected for PlasmicHomePageAdmin
    internalVariantProps: PlasmicHomePageAdmin__VariantProps,
    internalArgProps: PlasmicHomePageAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomePageAdmin;
/* prettier-ignore-end */
