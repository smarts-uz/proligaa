// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: WG0Ap6_yAl4V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicMatches.module.css"; // plasmic-import: WG0Ap6_yAl4V/css

createPlasmicElementProxy;

export type PlasmicMatches__VariantMembers = {};
export type PlasmicMatches__VariantsArgs = {};
type VariantPropType = keyof PlasmicMatches__VariantsArgs;
export const PlasmicMatches__VariantProps = new Array<VariantPropType>();

export type PlasmicMatches__ArgsType = {};
type ArgPropType = keyof PlasmicMatches__ArgsType;
export const PlasmicMatches__ArgProps = new Array<ArgPropType>();

export type PlasmicMatches__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  h2?: Flex__<"h2">;
  mainStak?: Flex__<"div">;
  leftStack?: Flex__<"div">;
  matchStak?: Flex__<"div">;
  rightStack?: Flex__<"div">;
  matchStak2?: Flex__<"div">;
};

export interface DefaultMatchesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMatches__RenderFunc(props: {
  variants: PlasmicMatches__VariantsArgs;
  args: PlasmicMatches__ArgsType;
  overrides: PlasmicMatches__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    matches: usePlasmicDataOp(() => {
      return {
        sourceId: "egnTD9CG9tqC7cm6ya647K",
        opId: "f3483166-d70c-438c-9ee9-c60fd4efdc80",
        userArgs: {},
        cacheKey: `plasmic.$.f3483166-d70c-438c-9ee9-c60fd4efdc80.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMatches.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMatches.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMatches.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__d7DLf)}>
            <div className={classNames(projectcss.all, sty.freeBox__ozsUl)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__exH9R
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FFFFFF" }}
                        >
                          {"Matches"}
                        </span>
                      </React.Fragment>
                    </h2>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"mainStak"}
            data-plasmic-override={overrides.mainStak}
            className={classNames(projectcss.all, sty.mainStak)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"leftStack"}
              data-plasmic-override={overrides.leftStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.leftStack)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yQgN
                )}
              >
                {"Today's Matches"}
              </div>
              <div
                data-plasmic-name={"matchStak"}
                data-plasmic-override={overrides.matchStak}
                className={classNames(projectcss.all, sty.matchStak)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__pLVoh)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={``}
                  loading={"lazy"}
                  src={
                    "https://assets-fantasy.llt-services.com/teambadge/t186/color/t186_real-madrid.png"
                  }
                  width={"30px"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jbGru
                  )}
                >
                  {"Real Madrid"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0FWZ
                  )}
                >
                  {"7:0"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4VvIb
                  )}
                >
                  {"Barcelona"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sspg9)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "https://assets-fantasy.llt-services.com/teambadge/t178/color/t178_fc-barcelona.png"
                  }
                  width={"30px"}
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"rightStack"}
              data-plasmic-override={overrides.rightStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.rightStack)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f5ED
                )}
              >
                {"All Planning Matches"}
              </div>
              <div
                data-plasmic-name={"matchStak2"}
                data-plasmic-override={overrides.matchStak2}
                className={classNames(projectcss.all, sty.matchStak2)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__y026P)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={``}
                  loading={"lazy"}
                  src={
                    "https://assets-fantasy.llt-services.com/teambadge/t186/color/t186_real-madrid.png"
                  }
                  width={"30px"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kpqlc
                  )}
                >
                  {"Real Madrid"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q7KYq
                  )}
                >
                  {"7:0"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__juZd
                  )}
                >
                  {"Barcelona"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wwxXm)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "https://assets-fantasy.llt-services.com/teambadge/t178/color/t178_fc-barcelona.png"
                  }
                  width={"30px"}
                />
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "h2",
    "mainStak",
    "leftStack",
    "matchStak",
    "rightStack",
    "matchStak2"
  ],
  navbar: ["navbar"],
  h2: ["h2"],
  mainStak: ["mainStak", "leftStack", "matchStak", "rightStack", "matchStak2"],
  leftStack: ["leftStack", "matchStak"],
  matchStak: ["matchStak"],
  rightStack: ["rightStack", "matchStak2"],
  matchStak2: ["matchStak2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  h2: "h2";
  mainStak: "div";
  leftStack: "div";
  matchStak: "div";
  rightStack: "div";
  matchStak2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMatches__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMatches__VariantsArgs;
    args?: PlasmicMatches__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMatches__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMatches__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMatches__ArgProps,
          internalVariantPropNames: PlasmicMatches__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMatches__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMatches";
  } else {
    func.displayName = `PlasmicMatches.${nodeName}`;
  }
  return func;
}

export const PlasmicMatches = Object.assign(
  // Top-level PlasmicMatches renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    h2: makeNodeComponent("h2"),
    mainStak: makeNodeComponent("mainStak"),
    leftStack: makeNodeComponent("leftStack"),
    matchStak: makeNodeComponent("matchStak"),
    rightStack: makeNodeComponent("rightStack"),
    matchStak2: makeNodeComponent("matchStak2"),

    // Metadata about props expected for PlasmicMatches
    internalVariantProps: PlasmicMatches__VariantProps,
    internalArgProps: PlasmicMatches__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "matches",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMatches;
/* prettier-ignore-end */
